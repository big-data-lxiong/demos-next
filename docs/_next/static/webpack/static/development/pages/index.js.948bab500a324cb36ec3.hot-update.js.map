{"version":3,"file":"static/webpack/static/development/pages/index.js.948bab500a324cb36ec3.hot-update.js","sources":["webpack:///./components/LinkGenForm/index.tsx","webpack:///./node_modules/tracking-url-util/dist/index.js","webpack:///./node_modules/tracking-url-util/dist/lib.js"],"sourcesContent":["import * as React from 'react'\nimport { Form, Input, Button, message, Modal } from 'antd'\nimport { FormComponentProps } from 'antd/lib/form'\nimport * as TrackingRotations from 'tracking-rotations-util'\nimport { getClickLink, getImpressionLink, EPNChannelClickOptions, EPNChannelImpressionOptions, MarketingChannel, AdType, MarketingEventType } from 'chocolate-convertor'\nimport LinkClipboard from '../LinkClipboard'\nimport * as TrackingURL from 'tracking-url-util'\nimport './style.scss'\n\ninterface LinkGenFormProps extends FormComponentProps {\n}\n\ninterface LinkGenFormState {\n    clickURL: string;\n    impressionURL: string;\n    showModal: boolean\n}\n\ninterface FormValues {\n    url?: string;\n    campid?: number;\n    customid?: string;\n}\n\n\nclass LinkGenForm extends React.PureComponent<LinkGenFormProps, LinkGenFormState> {\n    constructor(props) {\n        super(props)\n        this.state = {\n            clickURL: '',\n            impressionURL: '',\n            showModal: false,\n        }\n    }\n\n    render() {\n        return (\n            <div className='link-gen-form'>\n                <h1 className='link-gen-form__title'>\n                    Chocolate Link Generator\n                </h1>\n                <Form className='link-gen-form__form' onSubmit={this.onSubmit}>\n                    <Form.Item label='eBay URL'>\n                        {this.props.form.getFieldDecorator('url', {\n                            rules: [{\n                                required: true,\n                                validator: (_rule, value, cb) => {\n                                    const msg = 'Please enter a valid eBay domain'\n                                    if (!value) {\n                                        cb(msg)\n                                        return\n                                    }\n\n                                    if (!TrackingURL.isProtocolPresent(value)) {\n                                        value = TrackingURL.withProtocol(value, TrackingURL.Protocols.HTTPS)\n                                    }\n\n                                    if (!TrackingURL.isValidProtocol(value)) {\n                                        return cb(msg)\n                                    }\n\n                                    if (!TrackingRotations.isValidRotationURL(value)) {\n                                        cb('Please enter a valid eBay domain')\n                                    } else {\n                                        cb()\n                                    }\n                                }\n                            }]\n                        })(\n                            <Input autoFocus={true} placeholder='eBay URL (eg. www.ebay.com)' size='large'/>\n                        )}\n                    </Form.Item>\n\n                    <Form.Item label='Campaign ID'>\n                        {this.props.form.getFieldDecorator('campid', {\n                            rules: [{\n                                required: true, message: 'Campaign ID is required'\n                            }]\n                        })(\n                            <Input placeholder='Campaign ID' type='number' size='large'/>\n                        )}\n                    </Form.Item>\n\n                    <Form.Item label='Custom ID'>\n                        {this.props.form.getFieldDecorator('customid', {\n                            rules: [{\n                                required: false\n                            }]\n                        })(\n                            <Input placeholder='Custom ID' size='large'/>\n                        )}\n                    </Form.Item>\n\n                    <Button size='large' type='primary' htmlType='submit'>\n                        Generate\n                    </Button>\n                </Form>\n\n                <Modal\n                    cancelButtonProps={{style: {display: 'none'}}}\n                    okText='Done'\n                    onCancel={this.onCloseModal}\n                    onOk={this.onCloseModal}\n                    visible={this.state.showModal}\n                >\n                    <LinkClipboard\n                        clickURL={this.state.clickURL}\n                        impressionURL={this.state.impressionURL}\n                    />\n                </Modal>\n            </div>\n        )\n    }\n\n    private onCloseModal = () => {\n        this.setState({showModal: false})\n    }\n\n    private onSubmit = (event: React.FormEvent) => {\n        this.setState({clickURL: '', impressionURL: ''})\n        event.preventDefault()\n        this.props.form.validateFieldsAndScroll((err, values: FormValues) => {\n            if (err) {\n                console.warn(JSON.stringify(err))\n                return\n            }\n            if (!values.url) {\n                return message.error('Please enter a valid eBay URL')\n            }\n            if (!values.campid) {\n                return message.error('Please enter a campaign ID')\n            }\n            const rotation = TrackingRotations.getRotationByURL(values.url)\n            if (!rotation) {\n                return message.error('No rotation found for your eBay URL')\n            }\n            const clickOpts: EPNChannelClickOptions = {\n                mkcid: MarketingChannel.EPN,\n                mkrid: rotation.id,\n                siteid: rotation.siteId,\n                campid: values.campid.toString(),\n                customid: values.customid,\n                toolid: '10001',\n            }\n            const clickURL = getClickLink(values.url, clickOpts)\n            const impOpts: EPNChannelImpressionOptions = {\n                mkcid: MarketingChannel.EPN,\n                mkrid: rotation.id,\n                siteid: rotation.siteId,\n                mkevt: MarketingEventType.Impression,\n                ad_type: AdType.Tracer,\n                campid: values.campid.toString(),\n                toolid: '10001',\n            }\n            const impressionURL = getImpressionLink(impOpts)\n            this.setState({\n                clickURL,\n                impressionURL,\n                showModal: true,\n            })\n        })\n    }\n}\n\nexport default Form.create()(LinkGenForm)\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar lib_1 = require(\"./lib\");\nexports.withProtocol = lib_1.withProtocol;\nexports.isProtocolPresent = lib_1.isProtocolPresent;\nexports.isValidProtocol = lib_1.isValidProtocol;\nexports.isRoverURL = lib_1.isRoverURL;\nexports.Protocols = lib_1.Protocols;\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar url_parse_1 = __importDefault(require(\"url-parse\"));\nvar Protocols;\n(function (Protocols) {\n    Protocols[\"HTTP\"] = \"http:\";\n    Protocols[\"HTTPS\"] = \"https:\";\n})(Protocols = exports.Protocols || (exports.Protocols = {}));\n/**\n * withProtocol converts the URL to use a certain protocol and slashes.\n *\n * @param url\n * @param protocol defaults to https\n */\nfunction withProtocol(url, protocol) {\n    var info = new url_parse_1.default(url, {});\n    info.set('protocol', protocol);\n    return info.toString();\n}\nexports.withProtocol = withProtocol;\n/**\n * isProtocolPresent returns true if a protocol is found for the given URL\n *\n * @param url\n */\nfunction isProtocolPresent(url) {\n    var info = new url_parse_1.default(url, {});\n    return info.protocol !== undefined && info.protocol !== '';\n}\nexports.isProtocolPresent = isProtocolPresent;\n/**\n * isValidProtocol returns true if the protocol uses a valid protocol for\n * tracking URLs (eg. http and https are valid protocols because the end user)\n *\n * @param url\n */\nfunction isValidProtocol(url) {\n    var info = new url_parse_1.default(url, {});\n    return info.protocol === 'http:' || info.protocol === 'https:';\n}\nexports.isValidProtocol = isValidProtocol;\n/**\n * isRoverURL returns true if a URL is a rover URL, false otherwise.\n *\n * @param url\n */\nfunction isRoverURL(url) {\n    var hostname = new url_parse_1.default(url, {}).hostname;\n    return hostname === 'rover.ebay.com' || hostname === 'rover.qa.ebay.com';\n}\nexports.isRoverURL = isRoverURL;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAiBA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAyFA;AAAA;AAAA;AACA;AACA;AA3FA;AA6FA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAtIA;AACA;AACA;AACA;AAHA;AAFA;AAOA;AACA;;;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAtBA;AADA;AA0BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AADA;AADA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AADA;AADA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;;;;AAvFA;AACA;AA0IA;;;;;;;;;;;;ACpKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;A","sourceRoot":""}